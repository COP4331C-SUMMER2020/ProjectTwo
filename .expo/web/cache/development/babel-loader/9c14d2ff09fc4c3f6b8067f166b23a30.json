{"ast":null,"code":"\"use strict\";\n\nmodule.exports = function (useSourceMap) {\n  var list = [];\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return '@media ' + item[2] + '{' + content + '}';\n      } else {\n        return content;\n      }\n    }).join('');\n  };\n\n  list.i = function (modules, mediaQuery) {\n    if (typeof modules === 'string') {\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    for (var i = 0; i < this.length; i++) {\n      var id = this[i][0];\n\n      if (id != null) {\n        alreadyImportedModules[id] = true;\n      }\n    }\n\n    for (i = 0; i < modules.length; i++) {\n      var item = modules[i];\n\n      if (item[0] == null || !alreadyImportedModules[item[0]]) {\n        if (mediaQuery && !item[2]) {\n          item[2] = mediaQuery;\n        } else if (mediaQuery) {\n          item[2] = '(' + item[2] + ') and (' + mediaQuery + ')';\n        }\n\n        list.push(item);\n      }\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || '';\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n}\n\nfunction toComment(sourceMap) {\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n  return '/*# ' + data + ' */';\n}","map":{"version":3,"sources":["C:/Users/abocr/AppData/Roaming/npm/node_modules/expo-cli/node_modules/css-loader/dist/runtime/api.js"],"names":["module","exports","useSourceMap","list","toString","map","item","content","cssWithMappingToString","join","i","modules","mediaQuery","alreadyImportedModules","length","id","push","cssMapping","btoa","sourceMapping","toComment","sourceURLs","sources","source","sourceRoot","concat","sourceMap","base64","unescape","encodeURIComponent","JSON","stringify","data"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return '@media ' + item[2] + '{' + content + '}';\n      } else {\n        return content;\n      }\n    }).join('');\n  }; // import a list of modules into the list\n\n\n  list.i = function (modules, mediaQuery) {\n    if (typeof modules === 'string') {\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    for (var i = 0; i < this.length; i++) {\n      var id = this[i][0];\n\n      if (id != null) {\n        alreadyImportedModules[id] = true;\n      }\n    }\n\n    for (i = 0; i < modules.length; i++) {\n      var item = modules[i]; // skip already imported module\n      // this implementation is not 100% perfect for weird media query combinations\n      // when a module is imported multiple times with different media queries.\n      // I hope this will never occur (Hey this way we have smaller bundles)\n\n      if (item[0] == null || !alreadyImportedModules[item[0]]) {\n        if (mediaQuery && !item[2]) {\n          item[2] = mediaQuery;\n        } else if (mediaQuery) {\n          item[2] = '(' + item[2] + ') and (' + mediaQuery + ')';\n        }\n\n        list.push(item);\n      }\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || '';\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n  return '/*# ' + data + ' */';\n}"]},"metadata":{},"sourceType":"script"}