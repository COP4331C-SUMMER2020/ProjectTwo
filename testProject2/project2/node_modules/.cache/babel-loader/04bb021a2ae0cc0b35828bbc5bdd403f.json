{"ast":null,"code":"/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport * as React from 'react';\nimport { forwardRef, useRef } from 'react';\nimport debounce from 'debounce';\nimport StyleSheet from '../StyleSheet';\nimport View from '../View';\n\nfunction normalizeScrollEvent(e) {\n  return {\n    nativeEvent: {\n      contentOffset: {\n        get x() {\n          return e.target.scrollLeft;\n        },\n\n        get y() {\n          return e.target.scrollTop;\n        }\n\n      },\n      contentSize: {\n        get height() {\n          return e.target.scrollHeight;\n        },\n\n        get width() {\n          return e.target.scrollWidth;\n        }\n\n      },\n      layoutMeasurement: {\n        get height() {\n          return e.target.offsetHeight;\n        },\n\n        get width() {\n          return e.target.offsetWidth;\n        }\n\n      }\n    },\n    timeStamp: Date.now()\n  };\n}\n\nfunction shouldEmitScrollEvent(lastTick, eventThrottle) {\n  var timeSinceLastTick = Date.now() - lastTick;\n  return eventThrottle > 0 && timeSinceLastTick >= eventThrottle;\n}\n/**\n * Encapsulates the Web-specific scroll throttling and disabling logic\n */\n\n\nvar ScrollViewBase = forwardRef(function (props, forwardedRef) {\n  var accessibilityLabel = props.accessibilityLabel,\n      accessibilityRole = props.accessibilityRole,\n      accessibilityState = props.accessibilityState,\n      children = props.children,\n      importantForAccessibility = props.importantForAccessibility,\n      nativeID = props.nativeID,\n      onLayout = props.onLayout,\n      onScroll = props.onScroll,\n      onTouchMove = props.onTouchMove,\n      onWheel = props.onWheel,\n      pointerEvents = props.pointerEvents,\n      _props$scrollEnabled = props.scrollEnabled,\n      scrollEnabled = _props$scrollEnabled === void 0 ? true : _props$scrollEnabled,\n      _props$scrollEventThr = props.scrollEventThrottle,\n      scrollEventThrottle = _props$scrollEventThr === void 0 ? 0 : _props$scrollEventThr,\n      showsHorizontalScrollIndicator = props.showsHorizontalScrollIndicator,\n      showsVerticalScrollIndicator = props.showsVerticalScrollIndicator,\n      style = props.style,\n      testID = props.testID;\n  var scrollState = useRef({\n    isScrolling: false,\n    scrollLastTick: 0\n  });\n\n  function createPreventableScrollHandler(handler) {\n    return function (e) {\n      if (scrollEnabled) {\n        if (handler) {\n          handler(e);\n        }\n      }\n    };\n  }\n\n  function handleScroll(e) {\n    e.persist();\n    e.stopPropagation(); // A scroll happened, so the scroll bumps the debounce.\n\n    var debouncedOnScrollEnd = debounce(handleScrollEnd, 100);\n    debouncedOnScrollEnd(e);\n\n    if (scrollState.current.isScrolling) {\n      // Scroll last tick may have changed, check if we need to notify\n      if (shouldEmitScrollEvent(scrollState.current.scrollLastTick, scrollEventThrottle)) {\n        handleScrollTick(e);\n      }\n    } else {\n      // Weren't scrolling, so we must have just started\n      handleScrollStart(e);\n    }\n  }\n\n  function handleScrollStart(e) {\n    scrollState.current.isScrolling = true;\n    scrollState.current.scrollLastTick = Date.now();\n  }\n\n  function handleScrollTick(e) {\n    scrollState.current.scrollLastTick = Date.now();\n\n    if (onScroll) {\n      onScroll(normalizeScrollEvent(e));\n    }\n  }\n\n  function handleScrollEnd(e) {\n    scrollState.current.isScrolling = false;\n\n    if (onScroll) {\n      onScroll(normalizeScrollEvent(e));\n    }\n  }\n\n  var hideScrollbar = showsHorizontalScrollIndicator === false || showsVerticalScrollIndicator === false;\n  return React.createElement(View, {\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: accessibilityRole,\n    accessibilityState: accessibilityState,\n    children: children,\n    importantForAccessibility: importantForAccessibility,\n    nativeID: nativeID,\n    onLayout: onLayout,\n    onScroll: handleScroll,\n    onTouchMove: createPreventableScrollHandler(onTouchMove),\n    onWheel: createPreventableScrollHandler(onWheel),\n    pointerEvents: pointerEvents,\n    ref: forwardedRef,\n    style: [style, !scrollEnabled && styles.scrollDisabled, hideScrollbar && styles.hideScrollbar],\n    testID: testID\n  });\n}); // Chrome doesn't support e.preventDefault in this case; touch-action must be\n// used to disable scrolling.\n// https://developers.google.com/web/updates/2017/01/scrolling-intervention\n\nvar styles = StyleSheet.create({\n  scrollDisabled: {\n    overflowX: 'hidden',\n    overflowY: 'hidden',\n    touchAction: 'none'\n  },\n  hideScrollbar: {\n    scrollbarWidth: 'none'\n  }\n});\nexport default ScrollViewBase;","map":{"version":3,"sources":["/mnt/c/Users/tyler/Desktop/Programfiles/JuniorDesign/project2/node_modules/react-native-web/dist/exports/ScrollView/ScrollViewBase.js"],"names":["React","forwardRef","useRef","debounce","StyleSheet","View","normalizeScrollEvent","e","nativeEvent","contentOffset","x","target","scrollLeft","y","scrollTop","contentSize","height","scrollHeight","width","scrollWidth","layoutMeasurement","offsetHeight","offsetWidth","timeStamp","Date","now","shouldEmitScrollEvent","lastTick","eventThrottle","timeSinceLastTick","ScrollViewBase","props","forwardedRef","accessibilityLabel","accessibilityRole","accessibilityState","children","importantForAccessibility","nativeID","onLayout","onScroll","onTouchMove","onWheel","pointerEvents","_props$scrollEnabled","scrollEnabled","_props$scrollEventThr","scrollEventThrottle","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","style","testID","scrollState","isScrolling","scrollLastTick","createPreventableScrollHandler","handler","handleScroll","persist","stopPropagation","debouncedOnScrollEnd","handleScrollEnd","current","handleScrollTick","handleScrollStart","hideScrollbar","createElement","ref","styles","scrollDisabled","create","overflowX","overflowY","touchAction","scrollbarWidth"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport * as React from 'react';\nimport { forwardRef, useRef } from 'react';\nimport debounce from 'debounce';\nimport StyleSheet from '../StyleSheet';\nimport View from '../View';\n\nfunction normalizeScrollEvent(e) {\n  return {\n    nativeEvent: {\n      contentOffset: {\n        get x() {\n          return e.target.scrollLeft;\n        },\n\n        get y() {\n          return e.target.scrollTop;\n        }\n\n      },\n      contentSize: {\n        get height() {\n          return e.target.scrollHeight;\n        },\n\n        get width() {\n          return e.target.scrollWidth;\n        }\n\n      },\n      layoutMeasurement: {\n        get height() {\n          return e.target.offsetHeight;\n        },\n\n        get width() {\n          return e.target.offsetWidth;\n        }\n\n      }\n    },\n    timeStamp: Date.now()\n  };\n}\n\nfunction shouldEmitScrollEvent(lastTick, eventThrottle) {\n  var timeSinceLastTick = Date.now() - lastTick;\n  return eventThrottle > 0 && timeSinceLastTick >= eventThrottle;\n}\n/**\n * Encapsulates the Web-specific scroll throttling and disabling logic\n */\n\n\nvar ScrollViewBase = forwardRef(function (props, forwardedRef) {\n  var accessibilityLabel = props.accessibilityLabel,\n      accessibilityRole = props.accessibilityRole,\n      accessibilityState = props.accessibilityState,\n      children = props.children,\n      importantForAccessibility = props.importantForAccessibility,\n      nativeID = props.nativeID,\n      onLayout = props.onLayout,\n      onScroll = props.onScroll,\n      onTouchMove = props.onTouchMove,\n      onWheel = props.onWheel,\n      pointerEvents = props.pointerEvents,\n      _props$scrollEnabled = props.scrollEnabled,\n      scrollEnabled = _props$scrollEnabled === void 0 ? true : _props$scrollEnabled,\n      _props$scrollEventThr = props.scrollEventThrottle,\n      scrollEventThrottle = _props$scrollEventThr === void 0 ? 0 : _props$scrollEventThr,\n      showsHorizontalScrollIndicator = props.showsHorizontalScrollIndicator,\n      showsVerticalScrollIndicator = props.showsVerticalScrollIndicator,\n      style = props.style,\n      testID = props.testID;\n  var scrollState = useRef({\n    isScrolling: false,\n    scrollLastTick: 0\n  });\n\n  function createPreventableScrollHandler(handler) {\n    return function (e) {\n      if (scrollEnabled) {\n        if (handler) {\n          handler(e);\n        }\n      }\n    };\n  }\n\n  function handleScroll(e) {\n    e.persist();\n    e.stopPropagation(); // A scroll happened, so the scroll bumps the debounce.\n\n    var debouncedOnScrollEnd = debounce(handleScrollEnd, 100);\n    debouncedOnScrollEnd(e);\n\n    if (scrollState.current.isScrolling) {\n      // Scroll last tick may have changed, check if we need to notify\n      if (shouldEmitScrollEvent(scrollState.current.scrollLastTick, scrollEventThrottle)) {\n        handleScrollTick(e);\n      }\n    } else {\n      // Weren't scrolling, so we must have just started\n      handleScrollStart(e);\n    }\n  }\n\n  function handleScrollStart(e) {\n    scrollState.current.isScrolling = true;\n    scrollState.current.scrollLastTick = Date.now();\n  }\n\n  function handleScrollTick(e) {\n    scrollState.current.scrollLastTick = Date.now();\n\n    if (onScroll) {\n      onScroll(normalizeScrollEvent(e));\n    }\n  }\n\n  function handleScrollEnd(e) {\n    scrollState.current.isScrolling = false;\n\n    if (onScroll) {\n      onScroll(normalizeScrollEvent(e));\n    }\n  }\n\n  var hideScrollbar = showsHorizontalScrollIndicator === false || showsVerticalScrollIndicator === false;\n  return React.createElement(View, {\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: accessibilityRole,\n    accessibilityState: accessibilityState,\n    children: children,\n    importantForAccessibility: importantForAccessibility,\n    nativeID: nativeID,\n    onLayout: onLayout,\n    onScroll: handleScroll,\n    onTouchMove: createPreventableScrollHandler(onTouchMove),\n    onWheel: createPreventableScrollHandler(onWheel),\n    pointerEvents: pointerEvents,\n    ref: forwardedRef,\n    style: [style, !scrollEnabled && styles.scrollDisabled, hideScrollbar && styles.hideScrollbar],\n    testID: testID\n  });\n}); // Chrome doesn't support e.preventDefault in this case; touch-action must be\n// used to disable scrolling.\n// https://developers.google.com/web/updates/2017/01/scrolling-intervention\n\nvar styles = StyleSheet.create({\n  scrollDisabled: {\n    overflowX: 'hidden',\n    overflowY: 'hidden',\n    touchAction: 'none'\n  },\n  hideScrollbar: {\n    scrollbarWidth: 'none'\n  }\n});\nexport default ScrollViewBase;"]},"metadata":{},"sourceType":"module"}