{"ast":null,"code":"import getBoundingClientRect from \"../../modules/getBoundingClientRect\";\nimport ResponderTouchHistoryStore from \"./ResponderTouchHistoryStore\";\n\nvar emptyFunction = function emptyFunction() {};\n\nvar emptyObject = {};\nvar emptyArray = [];\nexport default function createResponderEvent(domEvent) {\n  var rect;\n  var propagationWasStopped = false;\n  var changedTouches;\n  var touches;\n  var domEventChangedTouches = domEvent.changedTouches;\n  var domEventType = domEvent.type;\n  var metaKey = domEvent.metaKey === true;\n  var shiftKey = domEvent.shiftKey === true;\n  var force = domEventChangedTouches && domEventChangedTouches[0].force || 0;\n  var identifier = domEventChangedTouches && domEventChangedTouches[0].identifier || 0;\n  var clientX = domEventChangedTouches && domEventChangedTouches[0].clientX || domEvent.clientX;\n  var clientY = domEventChangedTouches && domEventChangedTouches[0].clientY || domEvent.clientY;\n  var pageX = domEventChangedTouches && domEventChangedTouches[0].pageX || domEvent.pageX;\n  var pageY = domEventChangedTouches && domEventChangedTouches[0].pageY || domEvent.pageY;\n  var preventDefault = typeof domEvent.preventDefault === 'function' ? domEvent.preventDefault.bind(domEvent) : emptyFunction;\n  var timestamp = domEvent.timeStamp;\n\n  function normalizeTouches(touches) {\n    return Array.prototype.slice.call(touches).map(function (touch) {\n      touch.timestamp = timestamp;\n      return touch;\n    });\n  }\n\n  if (domEventChangedTouches != null) {\n    changedTouches = normalizeTouches(domEventChangedTouches);\n    touches = normalizeTouches(domEvent.touches);\n  } else {\n    var emulatedTouches = [{\n      force: force,\n      identifier: identifier,\n\n      get locationX() {\n        return locationX();\n      },\n\n      get locationY() {\n        return locationY();\n      },\n\n      pageX: pageX,\n      pageY: pageY,\n      target: domEvent.target,\n      timestamp: timestamp\n    }];\n    changedTouches = emulatedTouches;\n    touches = domEventType === 'mouseup' || domEventType === 'dragstart' ? emptyArray : emulatedTouches;\n  }\n\n  var responderEvent = {\n    bubbles: true,\n    cancelable: true,\n    currentTarget: null,\n    defaultPrevented: domEvent.defaultPrevented,\n    dispatchConfig: emptyObject,\n    eventPhase: domEvent.eventPhase,\n    isDefaultPrevented: function isDefaultPrevented() {\n      return domEvent.defaultPrevented;\n    },\n    isPropagationStopped: function isPropagationStopped() {\n      return propagationWasStopped;\n    },\n    isTrusted: domEvent.isTrusted,\n    nativeEvent: {\n      altKey: false,\n      ctrlKey: false,\n      metaKey: metaKey,\n      shiftKey: shiftKey,\n      changedTouches: changedTouches,\n      force: force,\n      identifier: identifier,\n\n      get locationX() {\n        return locationX();\n      },\n\n      get locationY() {\n        return locationY();\n      },\n\n      pageX: pageX,\n      pageY: pageY,\n      target: domEvent.target,\n      timestamp: timestamp,\n      touches: touches,\n      type: domEventType\n    },\n    persist: emptyFunction,\n    preventDefault: preventDefault,\n    stopPropagation: function stopPropagation() {\n      propagationWasStopped = true;\n    },\n    target: domEvent.target,\n    timeStamp: timestamp,\n    touchHistory: ResponderTouchHistoryStore.touchHistory\n  };\n\n  function locationX() {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n\n    if (rect) {\n      return clientX - rect.left;\n    }\n  }\n\n  function locationY() {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n\n    if (rect) {\n      return clientY - rect.top;\n    }\n  }\n\n  return responderEvent;\n}","map":{"version":3,"sources":["/mnt/c/Users/tyler/Desktop/Programfiles/JuniorDesign/project2/node_modules/react-native-web/dist/hooks/useResponderEvents/createResponderEvent.js"],"names":["getBoundingClientRect","ResponderTouchHistoryStore","emptyFunction","emptyObject","emptyArray","createResponderEvent","domEvent","rect","propagationWasStopped","changedTouches","touches","domEventChangedTouches","domEventType","type","metaKey","shiftKey","force","identifier","clientX","clientY","pageX","pageY","preventDefault","bind","timestamp","timeStamp","normalizeTouches","Array","prototype","slice","call","map","touch","emulatedTouches","locationX","locationY","target","responderEvent","bubbles","cancelable","currentTarget","defaultPrevented","dispatchConfig","eventPhase","isDefaultPrevented","isPropagationStopped","isTrusted","nativeEvent","altKey","ctrlKey","persist","stopPropagation","touchHistory","left","top"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport getBoundingClientRect from '../../modules/getBoundingClientRect';\nimport ResponderTouchHistoryStore from './ResponderTouchHistoryStore';\n\nvar emptyFunction = function emptyFunction() {};\n\nvar emptyObject = {};\nvar emptyArray = [];\n/**\n * Converts a native DOM event to a ResponderEvent.\n * Mouse events are transformed into fake touch events.\n */\n\nexport default function createResponderEvent(domEvent) {\n  var rect;\n  var propagationWasStopped = false;\n  var changedTouches;\n  var touches;\n  var domEventChangedTouches = domEvent.changedTouches;\n  var domEventType = domEvent.type;\n  var metaKey = domEvent.metaKey === true;\n  var shiftKey = domEvent.shiftKey === true;\n  var force = domEventChangedTouches && domEventChangedTouches[0].force || 0;\n  var identifier = domEventChangedTouches && domEventChangedTouches[0].identifier || 0;\n  var clientX = domEventChangedTouches && domEventChangedTouches[0].clientX || domEvent.clientX;\n  var clientY = domEventChangedTouches && domEventChangedTouches[0].clientY || domEvent.clientY;\n  var pageX = domEventChangedTouches && domEventChangedTouches[0].pageX || domEvent.pageX;\n  var pageY = domEventChangedTouches && domEventChangedTouches[0].pageY || domEvent.pageY;\n  var preventDefault = typeof domEvent.preventDefault === 'function' ? domEvent.preventDefault.bind(domEvent) : emptyFunction;\n  var timestamp = domEvent.timeStamp;\n\n  function normalizeTouches(touches) {\n    return Array.prototype.slice.call(touches).map(function (touch) {\n      touch.timestamp = timestamp;\n      return touch;\n    });\n  }\n\n  if (domEventChangedTouches != null) {\n    changedTouches = normalizeTouches(domEventChangedTouches);\n    touches = normalizeTouches(domEvent.touches);\n  } else {\n    var emulatedTouches = [{\n      force: force,\n      identifier: identifier,\n\n      get locationX() {\n        return locationX();\n      },\n\n      get locationY() {\n        return locationY();\n      },\n\n      pageX: pageX,\n      pageY: pageY,\n      target: domEvent.target,\n      timestamp: timestamp\n    }];\n    changedTouches = emulatedTouches;\n    touches = domEventType === 'mouseup' || domEventType === 'dragstart' ? emptyArray : emulatedTouches;\n  }\n\n  var responderEvent = {\n    bubbles: true,\n    cancelable: true,\n    // `currentTarget` is set before dispatch\n    currentTarget: null,\n    defaultPrevented: domEvent.defaultPrevented,\n    dispatchConfig: emptyObject,\n    eventPhase: domEvent.eventPhase,\n    isDefaultPrevented: function isDefaultPrevented() {\n      return domEvent.defaultPrevented;\n    },\n    isPropagationStopped: function isPropagationStopped() {\n      return propagationWasStopped;\n    },\n    isTrusted: domEvent.isTrusted,\n    nativeEvent: {\n      altKey: false,\n      ctrlKey: false,\n      metaKey: metaKey,\n      shiftKey: shiftKey,\n      changedTouches: changedTouches,\n      force: force,\n      identifier: identifier,\n\n      get locationX() {\n        return locationX();\n      },\n\n      get locationY() {\n        return locationY();\n      },\n\n      pageX: pageX,\n      pageY: pageY,\n      target: domEvent.target,\n      timestamp: timestamp,\n      touches: touches,\n      type: domEventType\n    },\n    persist: emptyFunction,\n    preventDefault: preventDefault,\n    stopPropagation: function stopPropagation() {\n      propagationWasStopped = true;\n    },\n    target: domEvent.target,\n    timeStamp: timestamp,\n    touchHistory: ResponderTouchHistoryStore.touchHistory\n  }; // Using getters and functions serves two purposes:\n  // 1) The value of `currentTarget` is not initially available.\n  // 2) Measuring the clientRect may cause layout jank and should only be done on-demand.\n\n  function locationX() {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n\n    if (rect) {\n      return clientX - rect.left;\n    }\n  }\n\n  function locationY() {\n    rect = rect || getBoundingClientRect(responderEvent.currentTarget);\n\n    if (rect) {\n      return clientY - rect.top;\n    }\n  }\n\n  return responderEvent;\n}"]},"metadata":{},"sourceType":"module"}